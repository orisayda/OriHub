{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line } from \"./Op\";\nexport var Vec =\n/*#__PURE__*/\nfunction () {\n  function Vec() {\n    _classCallCheck(this, Vec);\n  }\n\n  _createClass(Vec, null, [{\n    key: \"add\",\n    value: function add(a, b) {\n      if (typeof b == \"number\") {\n        for (var i = 0, len = a.length; i < len; i++) {\n          a[i] += b;\n        }\n      } else {\n        for (var _i = 0, _len = a.length; _i < _len; _i++) {\n          a[_i] += b[_i] || 0;\n        }\n      }\n\n      return a;\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(a, b) {\n      if (typeof b == \"number\") {\n        for (var i = 0, len = a.length; i < len; i++) {\n          a[i] -= b;\n        }\n      } else {\n        for (var _i2 = 0, _len2 = a.length; _i2 < _len2; _i2++) {\n          a[_i2] -= b[_i2] || 0;\n        }\n      }\n\n      return a;\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      if (typeof b == \"number\") {\n        for (var i = 0, len = a.length; i < len; i++) {\n          a[i] *= b;\n        }\n      } else {\n        if (a.length != b.length) {\n          throw new Error(\"Cannot do element-wise multiply since the array lengths don't match: \".concat(a.toString(), \" multiply-with \").concat(b.toString()));\n        }\n\n        for (var _i3 = 0, _len3 = a.length; _i3 < _len3; _i3++) {\n          a[_i3] *= b[_i3];\n        }\n      }\n\n      return a;\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(a, b) {\n      if (typeof b == \"number\") {\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\n\n        for (var i = 0, len = a.length; i < len; i++) {\n          a[i] /= b;\n        }\n      } else {\n        if (a.length != b.length) {\n          throw new Error(\"Cannot do element-wise divide since the array lengths don't match. \".concat(a.toString(), \" divide-by \").concat(b.toString()));\n        }\n\n        for (var _i4 = 0, _len4 = a.length; _i4 < _len4; _i4++) {\n          a[_i4] /= b[_i4];\n        }\n      }\n\n      return a;\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(a, b) {\n      if (a.length != b.length) throw new Error(\"Array lengths don't match\");\n      var d = 0;\n\n      for (var i = 0, len = a.length; i < len; i++) {\n        d += a[i] * b[i];\n      }\n\n      return d;\n    }\n  }, {\n    key: \"cross2D\",\n    value: function cross2D(a, b) {\n      return a[0] * b[1] - a[1] * b[0];\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(a, b) {\n      return new Pt(a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]);\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude(a) {\n      return Math.sqrt(Vec.dot(a, a));\n    }\n  }, {\n    key: \"unit\",\n    value: function unit(a) {\n      var magnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      var m = magnitude === undefined ? Vec.magnitude(a) : magnitude;\n      if (m === 0) throw new Error(\"Cannot calculate unit vector because magnitude is 0\");\n      return Vec.divide(a, m);\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(a) {\n      return Vec.map(a, Math.abs);\n    }\n  }, {\n    key: \"floor\",\n    value: function floor(a) {\n      return Vec.map(a, Math.floor);\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil(a) {\n      return Vec.map(a, Math.ceil);\n    }\n  }, {\n    key: \"round\",\n    value: function round(a) {\n      return Vec.map(a, Math.round);\n    }\n  }, {\n    key: \"max\",\n    value: function max(a) {\n      var m = Number.MIN_VALUE;\n      var index = 0;\n\n      for (var i = 0, len = a.length; i < len; i++) {\n        m = Math.max(m, a[i]);\n        if (m === a[i]) index = i;\n      }\n\n      return {\n        value: m,\n        index: index\n      };\n    }\n  }, {\n    key: \"min\",\n    value: function min(a) {\n      var m = Number.MAX_VALUE;\n      var index = 0;\n\n      for (var i = 0, len = a.length; i < len; i++) {\n        m = Math.min(m, a[i]);\n        if (m === a[i]) index = i;\n      }\n\n      return {\n        value: m,\n        index: index\n      };\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(a) {\n      var s = 0;\n\n      for (var i = 0, len = a.length; i < len; i++) {\n        s += a[i];\n      }\n\n      return s;\n    }\n  }, {\n    key: \"map\",\n    value: function map(a, fn) {\n      for (var i = 0, len = a.length; i < len; i++) {\n        a[i] = fn(a[i], i, a);\n      }\n\n      return a;\n    }\n  }]);\n\n  return Vec;\n}();\nexport var Mat =\n/*#__PURE__*/\nfunction () {\n  function Mat() {\n    _classCallCheck(this, Mat);\n  }\n\n  _createClass(Mat, null, [{\n    key: \"add\",\n    value: function add(a, b) {\n      if (typeof b != \"number\") {\n        if (a[0].length != b[0].length) throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n        if (a.length != b.length) throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n      }\n\n      var g = new Group();\n      var isNum = typeof b == \"number\";\n\n      for (var i = 0, len = a.length; i < len; i++) {\n        g.push(a[i].$add(isNum ? b : b[i]));\n      }\n\n      return g;\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      var transposed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var elementwise = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var g = new Group();\n\n      if (typeof b != \"number\") {\n        if (elementwise) {\n          if (a.length != b.length) throw new Error(\"Cannot multiply matrix element-wise because the matrices' sizes don't match.\");\n\n          for (var ai = 0, alen = a.length; ai < alen; ai++) {\n            g.push(a[ai].$multiply(b[ai]));\n          }\n        } else {\n          if (!transposed && a[0].length != b.length) throw new Error(\"Cannot multiply matrix if rows in matrix-a don't match columns in matrix-b.\");\n          if (transposed && a[0].length != b[0].length) throw new Error(\"Cannot multiply matrix if transposed and the columns in both matrices don't match.\");\n          if (!transposed) b = Mat.transpose(b);\n\n          for (var _ai = 0, _alen = a.length; _ai < _alen; _ai++) {\n            var p = Pt.make(b.length, 0);\n\n            for (var bi = 0, blen = b.length; bi < blen; bi++) {\n              p[bi] = Vec.dot(a[_ai], b[bi]);\n            }\n\n            g.push(p);\n          }\n        }\n      } else {\n        for (var _ai2 = 0, _alen2 = a.length; _ai2 < _alen2; _ai2++) {\n          g.push(a[_ai2].$multiply(b));\n        }\n      }\n\n      return g;\n    }\n  }, {\n    key: \"zipSlice\",\n    value: function zipSlice(g, index) {\n      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var z = [];\n\n      for (var i = 0, len = g.length; i < len; i++) {\n        if (g[i].length - 1 < index && defaultValue === false) throw \"Index \".concat(index, \" is out of bounds\");\n        z.push(g[i][index] || defaultValue);\n      }\n\n      return new Pt(z);\n    }\n  }, {\n    key: \"zip\",\n    value: function zip(g) {\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var useLongest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var ps = new Group();\n      var len = useLongest ? g.reduce(function (a, b) {\n        return Math.max(a, b.length);\n      }, 0) : g[0].length;\n\n      for (var i = 0; i < len; i++) {\n        ps.push(Mat.zipSlice(g, i, defaultValue));\n      }\n\n      return ps;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose(g) {\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var useLongest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return Mat.zip(g, defaultValue, useLongest);\n    }\n  }, {\n    key: \"transform2D\",\n    value: function transform2D(pt, m) {\n      var x = pt[0] * m[0][0] + pt[1] * m[1][0] + m[2][0];\n      var y = pt[0] * m[0][1] + pt[1] * m[1][1] + m[2][1];\n      return new Pt(x, y);\n    }\n  }, {\n    key: \"scale2DMatrix\",\n    value: function scale2DMatrix(x, y) {\n      return new Group(new Pt(x, 0, 0), new Pt(0, y, 0), new Pt(0, 0, 1));\n    }\n  }, {\n    key: \"rotate2DMatrix\",\n    value: function rotate2DMatrix(cosA, sinA) {\n      return new Group(new Pt(cosA, sinA, 0), new Pt(-sinA, cosA, 0), new Pt(0, 0, 1));\n    }\n  }, {\n    key: \"shear2DMatrix\",\n    value: function shear2DMatrix(tanX, tanY) {\n      return new Group(new Pt(1, tanX, 0), new Pt(tanY, 1, 0), new Pt(0, 0, 1));\n    }\n  }, {\n    key: \"translate2DMatrix\",\n    value: function translate2DMatrix(x, y) {\n      return new Group(new Pt(1, 0, 0), new Pt(0, 1, 0), new Pt(x, y, 1));\n    }\n  }, {\n    key: \"scaleAt2DMatrix\",\n    value: function scaleAt2DMatrix(sx, sy, at) {\n      var m = Mat.scale2DMatrix(sx, sy);\n      m[2][0] = -at[0] * sx + at[0];\n      m[2][1] = -at[1] * sy + at[1];\n      return m;\n    }\n  }, {\n    key: \"rotateAt2DMatrix\",\n    value: function rotateAt2DMatrix(cosA, sinA, at) {\n      var m = Mat.rotate2DMatrix(cosA, sinA);\n      m[2][0] = at[0] * (1 - cosA) + at[1] * sinA;\n      m[2][1] = at[1] * (1 - cosA) - at[0] * sinA;\n      return m;\n    }\n  }, {\n    key: \"shearAt2DMatrix\",\n    value: function shearAt2DMatrix(tanX, tanY, at) {\n      var m = Mat.shear2DMatrix(tanX, tanY);\n      m[2][0] = -at[1] * tanY;\n      m[2][1] = -at[0] * tanX;\n      return m;\n    }\n  }, {\n    key: \"reflectAt2DMatrix\",\n    value: function reflectAt2DMatrix(p1, p2) {\n      var intercept = Line.intercept(p1, p2);\n\n      if (intercept == undefined) {\n        return [new Pt([-1, 0, 0]), new Pt([0, 1, 0]), new Pt([p1[0] + p2[0], 0, 1])];\n      } else {\n        var yi = intercept.yi;\n        var ang2 = Math.atan(intercept.slope) * 2;\n        var cosA = Math.cos(ang2);\n        var sinA = Math.sin(ang2);\n        return [new Pt([cosA, sinA, 0]), new Pt([sinA, -cosA, 0]), new Pt([-yi * sinA, yi + yi * cosA, 1])];\n      }\n    }\n  }]);\n\n  return Mat;\n}();","map":null,"metadata":{},"sourceType":"module"}