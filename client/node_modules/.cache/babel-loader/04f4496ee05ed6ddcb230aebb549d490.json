{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt } from \"./Pt\";\nexport var Typography =\n/*#__PURE__*/\nfunction () {\n  function Typography() {\n    _classCallCheck(this, Typography);\n  }\n\n  _createClass(Typography, null, [{\n    key: \"textWidthEstimator\",\n    value: function textWidthEstimator(fn) {\n      var samples = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"M\", \"n\", \".\"];\n      var distribution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0.06, 0.8, 0.14];\n      var m = samples.map(fn);\n      var avg = new Pt(distribution).dot(m);\n      return function (str) {\n        return str.length * avg;\n      };\n    }\n  }, {\n    key: \"truncate\",\n    value: function truncate(fn, str, width) {\n      var tail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n      var trim = Math.floor(str.length * Math.min(1, width / fn(str)));\n\n      if (trim < str.length) {\n        trim = Math.max(0, trim - tail.length);\n        return [str.substr(0, trim) + tail, trim];\n      } else {\n        return [str, str.length];\n      }\n    }\n  }, {\n    key: \"fontSizeToBox\",\n    value: function fontSizeToBox(box) {\n      var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var byHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var i = byHeight ? 1 : 0;\n      var h = box[1][i] - box[0][i];\n      var f = ratio * h;\n      return function (b) {\n        var nh = (b[1][i] - b[0][i]) / h;\n        return f * nh;\n      };\n    }\n  }, {\n    key: \"fontSizeToThreshold\",\n    value: function fontSizeToThreshold(threshold) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return function (defaultSize, val) {\n        var d = defaultSize * val / threshold;\n        if (direction < 0) return Math.min(d, defaultSize);\n        if (direction > 0) return Math.max(d, defaultSize);\n        return d;\n      };\n    }\n  }]);\n\n  return Typography;\n}();","map":null,"metadata":{},"sourceType":"module"}