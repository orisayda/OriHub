{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { VisualForm, Font } from \"./Form\";\nimport { Geom } from './Num';\nimport { Const } from './Util';\nimport { Pt, Group } from './Pt';\nimport { Rectangle } from \"./Op\";\nimport { DOMSpace } from \"./Dom\";\nexport var SVGSpace =\n/*#__PURE__*/\nfunction (_DOMSpace) {\n  _inherits(SVGSpace, _DOMSpace);\n\n  function SVGSpace(elem, callback) {\n    var _this;\n\n    _classCallCheck(this, SVGSpace);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SVGSpace).call(this, elem, callback));\n    _this.id = \"svgspace\";\n    _this._bgcolor = \"#999\";\n\n    if (_this._canvas.nodeName.toLowerCase() != \"svg\") {\n      var s = SVGSpace.svgElement(_this._canvas, \"svg\", \"\".concat(_this.id, \"_svg\"));\n      _this._container = _this._canvas;\n      _this._canvas = s;\n    }\n\n    return _this;\n  }\n\n  _createClass(SVGSpace, [{\n    key: \"getForm\",\n    value: function getForm() {\n      return new SVGForm(this);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(b, evt) {\n      _get(_getPrototypeOf(SVGSpace.prototype), \"resize\", this).call(this, b, evt);\n\n      SVGSpace.setAttr(this.element, {\n        \"viewBox\": \"0 0 \".concat(this.bound.width, \" \").concat(this.bound.height),\n        \"width\": \"\".concat(this.bound.width),\n        \"height\": \"\".concat(this.bound.height),\n        \"xmlns\": \"http://www.w3.org/2000/svg\",\n        \"version\": \"1.1\"\n      });\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(player) {\n      var temp = this._container.querySelectorAll(\".\" + SVGForm.scopeID(player));\n\n      temp.forEach(function (el) {\n        el.parentNode.removeChild(el);\n      });\n      return _get(_getPrototypeOf(SVGSpace.prototype), \"remove\", this).call(this, player);\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      this._container.innerHTML = \"\";\n      return _get(_getPrototypeOf(SVGSpace.prototype), \"removeAll\", this).call(this);\n    }\n  }, {\n    key: \"element\",\n    get: function get() {\n      return this._canvas;\n    }\n  }], [{\n    key: \"svgElement\",\n    value: function svgElement(parent, name, id) {\n      if (!parent || !parent.appendChild) throw new Error(\"parent is not a valid DOM element\");\n      var elem = document.querySelector(\"#\".concat(id));\n\n      if (!elem) {\n        elem = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n        elem.setAttribute(\"id\", id);\n        parent.appendChild(elem);\n      }\n\n      return elem;\n    }\n  }]);\n\n  return SVGSpace;\n}(DOMSpace);\nexport var SVGForm =\n/*#__PURE__*/\nfunction (_VisualForm) {\n  _inherits(SVGForm, _VisualForm);\n\n  function SVGForm(space) {\n    var _this2;\n\n    _classCallCheck(this, SVGForm);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(SVGForm).call(this));\n    _this2._ctx = {\n      group: null,\n      groupID: \"pts\",\n      groupCount: 0,\n      currentID: \"pts0\",\n      currentClass: \"\",\n      style: {\n        \"filled\": true,\n        \"stroked\": true,\n        \"fill\": \"#f03\",\n        \"stroke\": \"#fff\",\n        \"stroke-width\": 1,\n        \"stroke-linejoin\": \"bevel\",\n        \"stroke-linecap\": \"sqaure\"\n      },\n      font: \"11px sans-serif\",\n      fontSize: 11,\n      fontFamily: \"sans-serif\"\n    };\n    _this2._ready = false;\n    _this2._space = space;\n\n    _this2._space.add({\n      start: function start() {\n        _this2._ctx.group = _this2._space.element;\n        _this2._ctx.groupID = \"pts_svg_\" + SVGForm.groupID++;\n        _this2._ready = true;\n      }\n    });\n\n    return _this2;\n  }\n\n  _createClass(SVGForm, [{\n    key: \"styleTo\",\n    value: function styleTo(k, v) {\n      if (this._ctx.style[k] === undefined) throw new Error(\"\".concat(k, \" style property doesn't exist\"));\n      this._ctx.style[k] = v;\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(c) {\n      if (typeof c == \"boolean\") {\n        this.styleTo(\"filled\", c);\n      } else {\n        this.styleTo(\"filled\", true);\n        this.styleTo(\"fill\", c);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"stroke\",\n    value: function stroke(c, width, linejoin, linecap) {\n      if (typeof c == \"boolean\") {\n        this.styleTo(\"stroked\", c);\n      } else {\n        this.styleTo(\"stroked\", true);\n        this.styleTo(\"stroke\", c);\n        if (width) this.styleTo(\"stroke-width\", width);\n        if (linejoin) this.styleTo(\"stroke-linejoin\", linejoin);\n        if (linecap) this.styleTo(\"stroke-linecap\", linecap);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"cls\",\n    value: function cls(c) {\n      if (typeof c == \"boolean\") {\n        this._ctx.currentClass = \"\";\n      } else {\n        this._ctx.currentClass = c;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"font\",\n    value: function font(sizeOrFont, weight, style, lineHeight, family) {\n      if (typeof sizeOrFont == \"number\") {\n        this._font.size = sizeOrFont;\n        if (family) this._font.face = family;\n        if (weight) this._font.weight = weight;\n        if (style) this._font.style = style;\n        if (lineHeight) this._font.lineHeight = lineHeight;\n        this._ctx.font = this._font.value;\n      } else {\n        this._font = sizeOrFont;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._ctx.style = {\n        \"filled\": true,\n        \"stroked\": true,\n        \"fill\": \"#f03\",\n        \"stroke\": \"#fff\",\n        \"stroke-width\": 1,\n        \"stroke-linejoin\": \"bevel\",\n        \"stroke-linecap\": \"sqaure\"\n      };\n      this._font = new Font(14, \"sans-serif\");\n      this._ctx.font = this._font.value;\n      return this;\n    }\n  }, {\n    key: \"updateScope\",\n    value: function updateScope(group_id, group) {\n      this._ctx.group = group;\n      this._ctx.groupID = group_id;\n      this._ctx.groupCount = 0;\n      this.nextID();\n      return this._ctx;\n    }\n  }, {\n    key: \"scope\",\n    value: function scope(item) {\n      if (!item || item.animateID == null) throw new Error(\"item not defined or not yet added to Space\");\n      return this.updateScope(SVGForm.scopeID(item), this.space.element);\n    }\n  }, {\n    key: \"nextID\",\n    value: function nextID() {\n      this._ctx.groupCount++;\n      this._ctx.currentID = \"\".concat(this._ctx.groupID, \"-\").concat(this._ctx.groupCount);\n      return this._ctx.currentID;\n    }\n  }, {\n    key: \"point\",\n    value: function point(pt) {\n      var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n      var shape = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"square\";\n      this.nextID();\n      SVGForm.point(this._ctx, pt, radius, shape);\n      return this;\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(pts) {\n      this.nextID();\n      SVGForm.circle(this._ctx, pts[0], pts[1][0]);\n      return this;\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(pt, radius, startAngle, endAngle, cc) {\n      this.nextID();\n      SVGForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n      return this;\n    }\n  }, {\n    key: \"square\",\n    value: function square(pt, halfsize) {\n      this.nextID();\n      SVGForm.square(this._ctx, pt, halfsize);\n      return this;\n    }\n  }, {\n    key: \"line\",\n    value: function line(pts) {\n      this.nextID();\n      SVGForm.line(this._ctx, pts);\n      return this;\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(pts) {\n      this.nextID();\n      SVGForm.polygon(this._ctx, pts);\n      return this;\n    }\n  }, {\n    key: \"rect\",\n    value: function rect(pts) {\n      this.nextID();\n      SVGForm.rect(this._ctx, pts);\n      return this;\n    }\n  }, {\n    key: \"text\",\n    value: function text(pt, txt) {\n      this.nextID();\n      SVGForm.text(this._ctx, pt, txt);\n      return this;\n    }\n  }, {\n    key: \"log\",\n    value: function log(txt) {\n      this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n      return this;\n    }\n  }, {\n    key: \"space\",\n    get: function get() {\n      return this._space;\n    }\n  }], [{\n    key: \"getID\",\n    value: function getID(ctx) {\n      return ctx.currentID || \"p-\".concat(SVGForm.domID++);\n    }\n  }, {\n    key: \"scopeID\",\n    value: function scopeID(item) {\n      return \"item-\".concat(item.animateID);\n    }\n  }, {\n    key: \"style\",\n    value: function style(elem, styles) {\n      var st = [];\n      if (!styles[\"filled\"]) st.push(\"fill: none\");\n      if (!styles[\"stroked\"]) st.push(\"stroke: none\");\n\n      for (var k in styles) {\n        if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n          var v = styles[k];\n\n          if (v) {\n            if (!styles[\"filled\"] && k.indexOf('fill') === 0) {\n              continue;\n            } else if (!styles[\"stroked\"] && k.indexOf('stroke') === 0) {\n              continue;\n            } else {\n              st.push(\"\".concat(k, \": \").concat(v));\n            }\n          }\n        }\n      }\n\n      return DOMSpace.setAttr(elem, {\n        style: st.join(\";\")\n      });\n    }\n  }, {\n    key: \"point\",\n    value: function point(ctx, pt) {\n      var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n      var shape = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"square\";\n\n      if (shape === \"circle\") {\n        return SVGForm.circle(ctx, pt, radius);\n      } else {\n        return SVGForm.square(ctx, pt, radius);\n      }\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(ctx, pt) {\n      var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n      var elem = SVGSpace.svgElement(ctx.group, \"circle\", SVGForm.getID(ctx));\n      DOMSpace.setAttr(elem, {\n        cx: pt[0],\n        cy: pt[1],\n        r: radius,\n        'class': \"pts-svgform pts-circle \".concat(ctx.currentClass)\n      });\n      SVGForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(ctx, pt, radius, startAngle, endAngle, cc) {\n      var elem = SVGSpace.svgElement(ctx.group, \"path\", SVGForm.getID(ctx));\n      var start = new Pt(pt).toAngle(startAngle, radius, true);\n      var end = new Pt(pt).toAngle(endAngle, radius, true);\n      var diff = Geom.boundAngle(endAngle) - Geom.boundAngle(startAngle);\n      var largeArc = diff > Const.pi ? true : false;\n      if (cc) largeArc = !largeArc;\n      var sweep = cc ? \"0\" : \"1\";\n      var d = \"M \".concat(start[0], \" \").concat(start[1], \" A \").concat(radius, \" \").concat(radius, \" 0 \").concat(largeArc ? \"1\" : \"0\", \" \").concat(sweep, \" \").concat(end[0], \" \").concat(end[1]);\n      DOMSpace.setAttr(elem, {\n        d: d,\n        'class': \"pts-svgform pts-arc \".concat(ctx.currentClass)\n      });\n      SVGForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"square\",\n    value: function square(ctx, pt, halfsize) {\n      var elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n      DOMSpace.setAttr(elem, {\n        x: pt[0] - halfsize,\n        y: pt[1] - halfsize,\n        width: halfsize * 2,\n        height: halfsize * 2,\n        'class': \"pts-svgform pts-square \".concat(ctx.currentClass)\n      });\n      SVGForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"line\",\n    value: function line(ctx, pts) {\n      if (!this._checkSize(pts)) return;\n      if (pts.length > 2) return SVGForm._poly(ctx, pts, false);\n      var elem = SVGSpace.svgElement(ctx.group, \"line\", SVGForm.getID(ctx));\n      DOMSpace.setAttr(elem, {\n        x1: pts[0][0],\n        y1: pts[0][1],\n        x2: pts[1][0],\n        y2: pts[1][1],\n        'class': \"pts-svgform pts-line \".concat(ctx.currentClass)\n      });\n      SVGForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"_poly\",\n    value: function _poly(ctx, pts) {\n      var closePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!this._checkSize(pts)) return;\n      var elem = SVGSpace.svgElement(ctx.group, closePath ? \"polygon\" : \"polyline\", SVGForm.getID(ctx));\n      var points = pts.reduce(function (a, p) {\n        return a + \"\".concat(p[0], \",\").concat(p[1], \" \");\n      }, \"\");\n      DOMSpace.setAttr(elem, {\n        points: points,\n        'class': \"pts-svgform pts-polygon \".concat(ctx.currentClass)\n      });\n      SVGForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(ctx, pts) {\n      return SVGForm._poly(ctx, pts, true);\n    }\n  }, {\n    key: \"rect\",\n    value: function rect(ctx, pts) {\n      if (!this._checkSize(pts)) return;\n      var elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n      var bound = Group.fromArray(pts).boundingBox();\n      var size = Rectangle.size(bound);\n      DOMSpace.setAttr(elem, {\n        x: bound[0][0],\n        y: bound[0][1],\n        width: size[0],\n        height: size[1],\n        'class': \"pts-svgform pts-rect \".concat(ctx.currentClass)\n      });\n      SVGForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"text\",\n    value: function text(ctx, pt, txt) {\n      var elem = SVGSpace.svgElement(ctx.group, \"text\", SVGForm.getID(ctx));\n      DOMSpace.setAttr(elem, {\n        \"pointer-events\": \"none\",\n        x: pt[0],\n        y: pt[1],\n        dx: 0,\n        dy: 0,\n        'class': \"pts-svgform pts-text \".concat(ctx.currentClass)\n      });\n      elem.textContent = txt;\n      SVGForm.style(elem, ctx.style);\n      return elem;\n    }\n  }]);\n\n  return SVGForm;\n}(VisualForm);\nSVGForm.groupID = 0;\nSVGForm.domID = 0;","map":null,"metadata":{},"sourceType":"module"}