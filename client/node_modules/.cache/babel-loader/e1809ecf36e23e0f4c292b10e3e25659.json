{"ast":null,"code":"import _get from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Util } from './Util';\nimport { Pt, Bound } from './Pt';\nexport var DOMSpace =\n/*#__PURE__*/\nfunction (_MultiTouchSpace) {\n  _inherits(DOMSpace, _MultiTouchSpace);\n\n  function DOMSpace(elem, callback) {\n    var _this;\n\n    _classCallCheck(this, DOMSpace);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DOMSpace).call(this));\n    _this.id = \"domspace\";\n    _this._autoResize = true;\n    _this._bgcolor = \"#e1e9f0\";\n    _this._css = {};\n    var _selector = null;\n    var _existed = false;\n    _this.id = \"pts\";\n\n    if (elem instanceof Element) {\n      _selector = elem;\n      _this.id = \"pts_existing_space\";\n    } else {\n      _selector = document.querySelector(elem);\n      _existed = true;\n      _this.id = elem.substr(1);\n    }\n\n    if (!_selector) {\n      _this._container = DOMSpace.createElement(\"div\", \"pts_container\");\n      _this._canvas = DOMSpace.createElement(\"div\", \"pts_element\");\n\n      _this._container.appendChild(_this._canvas);\n\n      document.body.appendChild(_this._container);\n      _existed = false;\n    } else {\n      _this._canvas = _selector;\n      _this._container = _selector.parentElement;\n    }\n\n    setTimeout(_this._ready.bind(_assertThisInitialized(_assertThisInitialized(_this)), callback), 50);\n    return _this;\n  }\n\n  _createClass(DOMSpace, [{\n    key: \"_ready\",\n    value: function _ready(callback) {\n      if (!this._container) throw new Error(\"Cannot initiate #\".concat(this.id, \" element\"));\n      this._isReady = true;\n\n      this._resizeHandler(null);\n\n      this.clear(this._bgcolor);\n\n      this._canvas.dispatchEvent(new Event(\"ready\"));\n\n      for (var k in this.players) {\n        if (this.players.hasOwnProperty(k)) {\n          if (this.players[k].start) this.players[k].start(this.bound.clone(), this);\n        }\n      }\n\n      this._pointer = this.center;\n      this.refresh(false);\n      if (callback) callback(this.bound, this._canvas);\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(opt) {\n      if (opt.bgcolor) {\n        this._bgcolor = opt.bgcolor;\n      }\n\n      this.autoResize = opt.resize != undefined ? opt.resize : false;\n      return this;\n    }\n  }, {\n    key: \"getForm\",\n    value: function getForm() {\n      return null;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(b, evt) {\n      this.bound = b;\n      this.styles({\n        width: \"\".concat(b.width, \"px\"),\n        height: \"\".concat(b.height, \"px\")\n      }, true);\n\n      for (var k in this.players) {\n        if (this.players.hasOwnProperty(k)) {\n          var p = this.players[k];\n          if (p.resize) p.resize(this.bound, evt);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_resizeHandler\",\n    value: function _resizeHandler(evt) {\n      var b = Bound.fromBoundingRect(this._container.getBoundingClientRect());\n\n      if (this._autoResize) {\n        this.styles({\n          width: \"100%\",\n          height: \"100%\"\n        }, true);\n      } else {\n        this.styles({\n          width: \"\".concat(b.width, \"px\"),\n          height: \"\".concat(b.height, \"px\")\n        }, true);\n      }\n\n      this.resize(b, evt);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(bg) {\n      if (bg) this.background = bg;\n      this._canvas.innerHTML = \"\";\n      return this;\n    }\n  }, {\n    key: \"style\",\n    value: function style(key, val) {\n      var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._css[key] = val;\n      if (update) this._canvas.style[key] = val;\n      return this;\n    }\n  }, {\n    key: \"styles\",\n    value: function styles(_styles) {\n      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      for (var k in _styles) {\n        if (_styles.hasOwnProperty(k)) this.style(k, _styles[k], update);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"autoResize\",\n    set: function set(auto) {\n      this._autoResize = auto;\n\n      if (auto) {\n        window.addEventListener('resize', this._resizeHandler.bind(this));\n      } else {\n        delete this._css['width'];\n        delete this._css['height'];\n        window.removeEventListener('resize', this._resizeHandler.bind(this));\n      }\n    },\n    get: function get() {\n      return this._autoResize;\n    }\n  }, {\n    key: \"element\",\n    get: function get() {\n      return this._canvas;\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this._container;\n    }\n  }, {\n    key: \"ready\",\n    get: function get() {\n      return this._isReady;\n    }\n  }, {\n    key: \"background\",\n    set: function set(bg) {\n      this._bgcolor = bg;\n      this._container.style.backgroundColor = this._bgcolor;\n    },\n    get: function get() {\n      return this._bgcolor;\n    }\n  }], [{\n    key: \"createElement\",\n    value: function createElement() {\n      var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"div\";\n      var id = arguments.length > 1 ? arguments[1] : undefined;\n      var appendTo = arguments.length > 2 ? arguments[2] : undefined;\n      var d = document.createElement(elem);\n      if (id) d.setAttribute(\"id\", id);\n      if (appendTo && appendTo.appendChild) appendTo.appendChild(d);\n      return d;\n    }\n  }, {\n    key: \"setAttr\",\n    value: function setAttr(elem, data) {\n      for (var k in data) {\n        if (data.hasOwnProperty(k)) {\n          elem.setAttribute(k, data[k]);\n        }\n      }\n\n      return elem;\n    }\n  }, {\n    key: \"getInlineStyles\",\n    value: function getInlineStyles(data) {\n      var str = \"\";\n\n      for (var k in data) {\n        if (data.hasOwnProperty(k)) {\n          if (data[k]) str += \"\".concat(k, \": \").concat(data[k], \"; \");\n        }\n      }\n\n      return str;\n    }\n  }]);\n\n  return DOMSpace;\n}(MultiTouchSpace);\nexport var HTMLSpace =\n/*#__PURE__*/\nfunction (_DOMSpace) {\n  _inherits(HTMLSpace, _DOMSpace);\n\n  function HTMLSpace() {\n    _classCallCheck(this, HTMLSpace);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLSpace).apply(this, arguments));\n  }\n\n  _createClass(HTMLSpace, [{\n    key: \"getForm\",\n    value: function getForm() {\n      return new HTMLForm(this);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(player) {\n      var temp = this._container.querySelectorAll(\".\" + HTMLForm.scopeID(player));\n\n      temp.forEach(function (el) {\n        el.parentNode.removeChild(el);\n      });\n      return _get(_getPrototypeOf(HTMLSpace.prototype), \"remove\", this).call(this, player);\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      this._container.innerHTML = \"\";\n      return _get(_getPrototypeOf(HTMLSpace.prototype), \"removeAll\", this).call(this);\n    }\n  }], [{\n    key: \"htmlElement\",\n    value: function htmlElement(parent, name, id) {\n      var autoClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (!parent || !parent.appendChild) throw new Error(\"parent is not a valid DOM element\");\n      var elem = document.querySelector(\"#\".concat(id));\n\n      if (!elem) {\n        elem = document.createElement(name);\n        elem.setAttribute(\"id\", id);\n        if (autoClass) elem.setAttribute(\"class\", id.substring(0, id.indexOf(\"-\")));\n        parent.appendChild(elem);\n      }\n\n      return elem;\n    }\n  }]);\n\n  return HTMLSpace;\n}(DOMSpace);\nexport var HTMLForm =\n/*#__PURE__*/\nfunction (_VisualForm) {\n  _inherits(HTMLForm, _VisualForm);\n\n  function HTMLForm(space) {\n    var _this2;\n\n    _classCallCheck(this, HTMLForm);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HTMLForm).call(this));\n    _this2._ctx = {\n      group: null,\n      groupID: \"pts\",\n      groupCount: 0,\n      currentID: \"pts0\",\n      currentClass: \"\",\n      style: {\n        \"filled\": true,\n        \"stroked\": true,\n        \"background\": \"#f03\",\n        \"border-color\": \"#fff\",\n        \"color\": \"#000\",\n        \"border-width\": \"1px\",\n        \"border-radius\": \"0\",\n        \"border-style\": \"solid\",\n        \"position\": \"absolute\",\n        \"top\": 0,\n        \"left\": 0,\n        \"width\": 0,\n        \"height\": 0\n      },\n      font: \"11px sans-serif\",\n      fontSize: 11,\n      fontFamily: \"sans-serif\"\n    };\n    _this2._ready = false;\n    _this2._space = space;\n\n    _this2._space.add({\n      start: function start() {\n        _this2._ctx.group = _this2._space.element;\n        _this2._ctx.groupID = \"pts_dom_\" + HTMLForm.groupID++;\n        _this2._ready = true;\n      }\n    });\n\n    return _this2;\n  }\n\n  _createClass(HTMLForm, [{\n    key: \"styleTo\",\n    value: function styleTo(k, v) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      if (this._ctx.style[k] === undefined) throw new Error(\"\".concat(k, \" style property doesn't exist\"));\n      this._ctx.style[k] = \"\".concat(v).concat(unit);\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(c) {\n      if (typeof c == \"boolean\") {\n        this.styleTo(\"filled\", c);\n        if (!c) this.styleTo(\"background\", \"transparent\");\n      } else {\n        this.styleTo(\"filled\", true);\n        this.styleTo(\"background\", c);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"stroke\",\n    value: function stroke(c, width, linejoin, linecap) {\n      if (typeof c == \"boolean\") {\n        this.styleTo(\"stroked\", c);\n        if (!c) this.styleTo(\"border-width\", 0);\n      } else {\n        this.styleTo(\"stroked\", true);\n        this.styleTo(\"border-color\", c);\n        this.styleTo(\"border-width\", (width || 1) + \"px\");\n      }\n\n      return this;\n    }\n  }, {\n    key: \"fillText\",\n    value: function fillText(c) {\n      this.styleTo(\"color\", c);\n      return this;\n    }\n  }, {\n    key: \"cls\",\n    value: function cls(c) {\n      if (typeof c == \"boolean\") {\n        this._ctx.currentClass = \"\";\n      } else {\n        this._ctx.currentClass = c;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"font\",\n    value: function font(sizeOrFont, weight, style, lineHeight, family) {\n      if (typeof sizeOrFont == \"number\") {\n        this._font.size = sizeOrFont;\n        if (family) this._font.face = family;\n        if (weight) this._font.weight = weight;\n        if (style) this._font.style = style;\n        if (lineHeight) this._font.lineHeight = lineHeight;\n        this._ctx.font = this._font.value;\n      } else {\n        this._font = sizeOrFont;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._ctx.style = {\n        \"filled\": true,\n        \"stroked\": true,\n        \"background\": \"#f03\",\n        \"border-color\": \"#fff\",\n        \"border-width\": \"1px\"\n      };\n      this._font = new Font(14, \"sans-serif\");\n      this._ctx.font = this._font.value;\n      return this;\n    }\n  }, {\n    key: \"updateScope\",\n    value: function updateScope(group_id, group) {\n      this._ctx.group = group;\n      this._ctx.groupID = group_id;\n      this._ctx.groupCount = 0;\n      this.nextID();\n      return this._ctx;\n    }\n  }, {\n    key: \"scope\",\n    value: function scope(item) {\n      if (!item || item.animateID == null) throw new Error(\"item not defined or not yet added to Space\");\n      return this.updateScope(HTMLForm.scopeID(item), this.space.element);\n    }\n  }, {\n    key: \"nextID\",\n    value: function nextID() {\n      this._ctx.groupCount++;\n      this._ctx.currentID = \"\".concat(this._ctx.groupID, \"-\").concat(this._ctx.groupCount);\n      return this._ctx.currentID;\n    }\n  }, {\n    key: \"point\",\n    value: function point(pt) {\n      var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n      var shape = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"square\";\n      this.nextID();\n      if (shape == \"circle\") this.styleTo(\"border-radius\", \"100%\");\n      HTMLForm.point(this._ctx, pt, radius, shape);\n      return this;\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(pts) {\n      this.nextID();\n      this.styleTo(\"border-radius\", \"100%\");\n      HTMLForm.circle(this._ctx, pts[0], pts[1][0]);\n      return this;\n    }\n  }, {\n    key: \"square\",\n    value: function square(pt, halfsize) {\n      this.nextID();\n      HTMLForm.square(this._ctx, pt, halfsize);\n      return this;\n    }\n  }, {\n    key: \"rect\",\n    value: function rect(pts) {\n      this.nextID();\n      this.styleTo(\"border-radius\", \"0\");\n      HTMLForm.rect(this._ctx, pts);\n      return this;\n    }\n  }, {\n    key: \"text\",\n    value: function text(pt, txt) {\n      this.nextID();\n      HTMLForm.text(this._ctx, pt, txt);\n      return this;\n    }\n  }, {\n    key: \"log\",\n    value: function log(txt) {\n      this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n      return this;\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(pt, radius, startAngle, endAngle, cc) {\n      Util.warn(\"arc is not implemented in HTMLForm\");\n      return this;\n    }\n  }, {\n    key: \"line\",\n    value: function line(pts) {\n      Util.warn(\"line is not implemented in HTMLForm\");\n      return this;\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(pts) {\n      Util.warn(\"polygon is not implemented in HTMLForm\");\n      return this;\n    }\n  }, {\n    key: \"space\",\n    get: function get() {\n      return this._space;\n    }\n  }], [{\n    key: \"getID\",\n    value: function getID(ctx) {\n      return ctx.currentID || \"p-\".concat(HTMLForm.domID++);\n    }\n  }, {\n    key: \"scopeID\",\n    value: function scopeID(item) {\n      return \"item-\".concat(item.animateID);\n    }\n  }, {\n    key: \"style\",\n    value: function style(elem, styles) {\n      var st = [];\n      if (!styles[\"filled\"]) st.push(\"background: none\");\n      if (!styles[\"stroked\"]) st.push(\"border: none\");\n\n      for (var k in styles) {\n        if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n          var v = styles[k];\n\n          if (v) {\n            if (!styles[\"filled\"] && k.indexOf('background') === 0) {\n              continue;\n            } else if (!styles[\"stroked\"] && k.indexOf('border-width') === 0) {\n              continue;\n            } else {\n              st.push(\"\".concat(k, \": \").concat(v));\n            }\n          }\n        }\n      }\n\n      return HTMLSpace.setAttr(elem, {\n        style: st.join(\";\")\n      });\n    }\n  }, {\n    key: \"rectStyle\",\n    value: function rectStyle(ctx, pt, size) {\n      ctx.style[\"left\"] = pt[0] + \"px\";\n      ctx.style[\"top\"] = pt[1] + \"px\";\n      ctx.style[\"width\"] = size[0] + \"px\";\n      ctx.style[\"height\"] = size[1] + \"px\";\n      return ctx;\n    }\n  }, {\n    key: \"point\",\n    value: function point(ctx, pt) {\n      var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n      var shape = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"square\";\n\n      if (shape === \"circle\") {\n        return HTMLForm.circle(ctx, pt, radius);\n      } else {\n        return HTMLForm.square(ctx, pt, radius);\n      }\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(ctx, pt) {\n      var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n      var elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n      HTMLSpace.setAttr(elem, {\n        class: \"pts-form pts-circle \".concat(ctx.currentClass)\n      });\n      HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(radius), new Pt(radius * 2, radius * 2));\n      HTMLForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"square\",\n    value: function square(ctx, pt, halfsize) {\n      var elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n      HTMLSpace.setAttr(elem, {\n        class: \"pts-form pts-square \".concat(ctx.currentClass)\n      });\n      HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(halfsize), new Pt(halfsize * 2, halfsize * 2));\n      HTMLForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"rect\",\n    value: function rect(ctx, pts) {\n      if (!this._checkSize(pts)) return;\n      var elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n      HTMLSpace.setAttr(elem, {\n        class: \"pts-form pts-rect \".concat(ctx.currentClass)\n      });\n      HTMLForm.rectStyle(ctx, pts[0], pts[1]);\n      HTMLForm.style(elem, ctx.style);\n      return elem;\n    }\n  }, {\n    key: \"text\",\n    value: function text(ctx, pt, txt) {\n      var elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n      HTMLSpace.setAttr(elem, {\n        position: 'absolute',\n        class: \"pts-form pts-text \".concat(ctx.currentClass),\n        left: pt[0],\n        top: pt[1]\n      });\n      elem.textContent = txt;\n      HTMLForm.style(elem, ctx.style);\n      return elem;\n    }\n  }]);\n\n  return HTMLForm;\n}(VisualForm);\nHTMLForm.groupID = 0;\nHTMLForm.domID = 0;","map":null,"metadata":{},"sourceType":"module"}