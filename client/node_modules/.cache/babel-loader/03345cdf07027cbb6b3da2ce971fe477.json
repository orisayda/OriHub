{"ast":null,"code":"import _construct from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/construct\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line, Triangle } from \"./Op\";\nimport { Const } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nimport { Vec } from \"./LinearAlgebra\";\nexport var Create =\n/*#__PURE__*/\nfunction () {\n  function Create() {\n    _classCallCheck(this, Create);\n  }\n\n  _createClass(Create, null, [{\n    key: \"distributeRandom\",\n    value: function distributeRandom(bound, count) {\n      var dimensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n      var pts = new Group();\n\n      for (var i = 0; i < count; i++) {\n        var p = [bound.x + Math.random() * bound.width];\n        if (dimensions > 1) p.push(bound.y + Math.random() * bound.height);\n        if (dimensions > 2) p.push(bound.z + Math.random() * bound.depth);\n        pts.push(new Pt(p));\n      }\n\n      return pts;\n    }\n  }, {\n    key: \"distributeLinear\",\n    value: function distributeLinear(line, count) {\n      var ln = Line.subpoints(line, count - 2);\n      ln.unshift(line[0]);\n      ln.push(line[line.length - 1]);\n      return ln;\n    }\n  }, {\n    key: \"gridPts\",\n    value: function gridPts(bound, columns, rows) {\n      var orientation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0.5, 0.5];\n      if (columns === 0 || rows === 0) throw new Error(\"grid columns and rows cannot be 0\");\n      var unit = bound.size.$subtract(1).$divide(columns, rows);\n      var offset = unit.$multiply(orientation);\n      var g = new Group();\n\n      for (var r = 0; r < rows; r++) {\n        for (var c = 0; c < columns; c++) {\n          g.push(bound.topLeft.$add(unit.$multiply(c, r)).add(offset));\n        }\n      }\n\n      return g;\n    }\n  }, {\n    key: \"gridCells\",\n    value: function gridCells(bound, columns, rows) {\n      if (columns === 0 || rows === 0) throw new Error(\"grid columns and rows cannot be 0\");\n      var unit = bound.size.$subtract(1).divide(columns, rows);\n      var g = [];\n\n      for (var r = 0; r < rows; r++) {\n        for (var c = 0; c < columns; c++) {\n          g.push(new Group(bound.topLeft.$add(unit.$multiply(c, r)), bound.topLeft.$add(unit.$multiply(c, r).add(unit))));\n        }\n      }\n\n      return g;\n    }\n  }, {\n    key: \"radialPts\",\n    value: function radialPts(center, radius, count) {\n      var g = new Group();\n      var a = Const.two_pi / count;\n\n      for (var i = 0; i < count; i++) {\n        g.push(new Pt(center).toAngle(a * i - Const.half_pi, radius, true));\n      }\n\n      return g;\n    }\n  }, {\n    key: \"noisePts\",\n    value: function noisePts(pts) {\n      var dx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.01;\n      var dy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.01;\n      var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var columns = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var seed = Math.random();\n      var g = new Group();\n\n      for (var i = 0, len = pts.length; i < len; i++) {\n        var np = new Noise(pts[i]);\n        var r = rows && rows > 0 ? Math.floor(i / rows) : i;\n        var c = columns && columns > 0 ? i % columns : i;\n        np.initNoise(dx * c, dy * r);\n        np.seed(seed);\n        g.push(np);\n      }\n\n      return g;\n    }\n  }, {\n    key: \"delaunay\",\n    value: function delaunay(pts) {\n      return Delaunay.from(pts);\n    }\n  }]);\n\n  return Create;\n}();\nvar grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\nvar permTable = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 9, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\nexport var Noise =\n/*#__PURE__*/\nfunction (_Pt) {\n  _inherits(Noise, _Pt);\n\n  function Noise() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Noise);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Noise)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.perm = [];\n    _this._n = new Pt(0.01, 0.01);\n    _this.perm = permTable.concat(permTable);\n    return _this;\n  }\n\n  _createClass(Noise, [{\n    key: \"initNoise\",\n    value: function initNoise() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._n = _construct(Pt, args);\n    }\n  }, {\n    key: \"step\",\n    value: function step() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      this._n.add(x, y);\n    }\n  }, {\n    key: \"seed\",\n    value: function seed(s) {\n      if (s > 0 && s < 1) s *= 65536;\n      s = Math.floor(s);\n      if (s < 256) s |= s << 8;\n\n      for (var i = 0; i < 255; i++) {\n        var v = i & 1 ? permTable[i] ^ s & 255 : permTable[i] ^ s >> 8 & 255;\n        this.perm[i] = this.perm[i + 256] = v;\n      }\n    }\n  }, {\n    key: \"noise2D\",\n    value: function noise2D() {\n      var i = Math.max(0, Math.floor(this._n[0])) % 255;\n      var j = Math.max(0, Math.floor(this._n[1])) % 255;\n      var x = this._n[0] % 255 - i;\n      var y = this._n[1] % 255 - j;\n      var n00 = Vec.dot(grad3[(i + this.perm[j]) % 12], [x, y, 0]);\n      var n01 = Vec.dot(grad3[(i + this.perm[j + 1]) % 12], [x, y - 1, 0]);\n      var n10 = Vec.dot(grad3[(i + 1 + this.perm[j]) % 12], [x - 1, y, 0]);\n      var n11 = Vec.dot(grad3[(i + 1 + this.perm[j + 1]) % 12], [x - 1, y - 1, 0]);\n\n      var _fade = function _fade(f) {\n        return f * f * f * (f * (f * 6 - 15) + 10);\n      };\n\n      var tx = _fade(x);\n\n      return Num.lerp(Num.lerp(n00, n10, tx), Num.lerp(n01, n11, tx), _fade(y));\n    }\n  }]);\n\n  return Noise;\n}(Pt);\nexport var Delaunay =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(Delaunay, _Group);\n\n  function Delaunay() {\n    var _this2;\n\n    _classCallCheck(this, Delaunay);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Delaunay).apply(this, arguments));\n    _this2._mesh = [];\n    return _this2;\n  }\n\n  _createClass(Delaunay, [{\n    key: \"delaunay\",\n    value: function delaunay() {\n      var _this3 = this;\n\n      var triangleOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (this.length < 3) return [];\n      this._mesh = [];\n      var n = this.length;\n      var indices = [];\n\n      for (var i = 0; i < n; i++) {\n        indices[i] = i;\n      }\n\n      indices.sort(function (i, j) {\n        return _this3[j][0] - _this3[i][0];\n      });\n      var pts = this.slice();\n\n      var st = this._superTriangle();\n\n      pts = pts.concat(st);\n      var opened = [this._circum(n, n + 1, n + 2, st)];\n      var closed = [];\n      var tris = [];\n\n      for (var _i = 0, len = indices.length; _i < len; _i++) {\n        var c = indices[_i];\n        var edges = [];\n        var j = opened.length;\n        if (!this._mesh[c]) this._mesh[c] = {};\n\n        while (j--) {\n          var circum = opened[j];\n          var radius = circum.circle[1][0];\n          var d = pts[c].$subtract(circum.circle[0]);\n\n          if (d[0] > 0 && d[0] * d[0] > radius * radius) {\n            closed.push(circum);\n            tris.push(circum.triangle);\n            opened.splice(j, 1);\n            continue;\n          }\n\n          if (d[0] * d[0] + d[1] * d[1] - radius * radius > Const.epsilon) {\n            continue;\n          }\n\n          edges.push(circum.i, circum.j, circum.j, circum.k, circum.k, circum.i);\n          opened.splice(j, 1);\n        }\n\n        Delaunay._dedupe(edges);\n\n        j = edges.length;\n\n        while (j > 1) {\n          opened.push(this._circum(edges[--j], edges[--j], c, false, pts));\n        }\n      }\n\n      for (var _i2 = 0, _len3 = opened.length; _i2 < _len3; _i2++) {\n        var o = opened[_i2];\n\n        if (o.i < n && o.j < n && o.k < n) {\n          closed.push(o);\n          tris.push(o.triangle);\n\n          this._cache(o);\n        }\n      }\n\n      return triangleOnly ? tris : closed;\n    }\n  }, {\n    key: \"voronoi\",\n    value: function voronoi() {\n      var vs = [];\n      var n = this._mesh;\n\n      for (var i = 0, len = n.length; i < len; i++) {\n        vs.push(this.neighborPts(i, true));\n      }\n\n      return vs;\n    }\n  }, {\n    key: \"mesh\",\n    value: function mesh() {\n      return this._mesh;\n    }\n  }, {\n    key: \"neighborPts\",\n    value: function neighborPts(i) {\n      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var cs = new Group();\n      var n = this._mesh;\n\n      for (var k in n[i]) {\n        if (n[i].hasOwnProperty(k)) cs.push(n[i][k].circle[0]);\n      }\n\n      return sort ? Geom.sortEdges(cs) : cs;\n    }\n  }, {\n    key: \"neighbors\",\n    value: function neighbors(i) {\n      var cs = [];\n      var n = this._mesh;\n\n      for (var k in n[i]) {\n        if (n[i].hasOwnProperty(k)) cs.push(n[i][k]);\n      }\n\n      return cs;\n    }\n  }, {\n    key: \"_cache\",\n    value: function _cache(o) {\n      this._mesh[o.i][\"\".concat(Math.min(o.j, o.k), \"-\").concat(Math.max(o.j, o.k))] = o;\n      this._mesh[o.j][\"\".concat(Math.min(o.i, o.k), \"-\").concat(Math.max(o.i, o.k))] = o;\n      this._mesh[o.k][\"\".concat(Math.min(o.i, o.j), \"-\").concat(Math.max(o.i, o.j))] = o;\n    }\n  }, {\n    key: \"_superTriangle\",\n    value: function _superTriangle() {\n      var minPt = this[0];\n      var maxPt = this[0];\n\n      for (var i = 1, len = this.length; i < len; i++) {\n        minPt = minPt.$min(this[i]);\n        maxPt = maxPt.$max(this[i]);\n      }\n\n      var d = maxPt.$subtract(minPt);\n      var mid = minPt.$add(maxPt).divide(2);\n      var dmax = Math.max(d[0], d[1]);\n      return new Group(mid.$subtract(20 * dmax, dmax), mid.$add(0, 20 * dmax), mid.$add(20 * dmax, -dmax));\n    }\n  }, {\n    key: \"_triangle\",\n    value: function _triangle(i, j, k) {\n      var pts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this;\n      return new Group(pts[i], pts[j], pts[k]);\n    }\n  }, {\n    key: \"_circum\",\n    value: function _circum(i, j, k, tri) {\n      var pts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this;\n\n      var t = tri || this._triangle(i, j, k, pts);\n\n      return {\n        i: i,\n        j: j,\n        k: k,\n        triangle: t,\n        circle: Triangle.circumcircle(t)\n      };\n    }\n  }], [{\n    key: \"_dedupe\",\n    value: function _dedupe(edges) {\n      var j = edges.length;\n\n      while (j > 1) {\n        var b = edges[--j];\n        var a = edges[--j];\n        var i = j;\n\n        while (i > 1) {\n          var n = edges[--i];\n          var m = edges[--i];\n\n          if (a == m && b == n || a == n && b == m) {\n            edges.splice(j, 2);\n            edges.splice(i, 2);\n            break;\n          }\n        }\n      }\n\n      return edges;\n    }\n  }]);\n\n  return Delaunay;\n}(Group);","map":null,"metadata":{},"sourceType":"module"}