{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Group } from \"./Pt\";\nexport var Const = {\n  xy: \"xy\",\n  yz: \"yz\",\n  xz: \"xz\",\n  xyz: \"xyz\",\n  horizontal: 0,\n  vertical: 1,\n  identical: 0,\n  right: 4,\n  bottom_right: 5,\n  bottom: 6,\n  bottom_left: 7,\n  left: 8,\n  top_left: 1,\n  top: 2,\n  top_right: 3,\n  epsilon: 0.0001,\n  max: Number.MAX_VALUE,\n  min: Number.MIN_VALUE,\n  pi: Math.PI,\n  two_pi: 6.283185307179586,\n  half_pi: 1.5707963267948966,\n  quarter_pi: 0.7853981633974483,\n  one_degree: 0.017453292519943295,\n  rad_to_deg: 57.29577951308232,\n  deg_to_rad: 0.017453292519943295,\n  gravity: 9.81,\n  newton: 0.10197,\n  gaussian: 0.3989422804014327\n};\nexport var Util =\n/*#__PURE__*/\nfunction () {\n  function Util() {\n    _classCallCheck(this, Util);\n  }\n\n  _createClass(Util, null, [{\n    key: \"warnLevel\",\n    value: function warnLevel(lv) {\n      if (lv) {\n        Util._warnLevel = lv;\n      }\n\n      return Util._warnLevel;\n    }\n  }, {\n    key: \"getArgs\",\n    value: function getArgs(args) {\n      if (args.length < 1) return [];\n      var pos = [];\n      var isArray = Array.isArray(args[0]) || ArrayBuffer.isView(args[0]);\n\n      if (typeof args[0] === 'number') {\n        pos = Array.prototype.slice.call(args);\n      } else if (typeof args[0] === 'object' && !isArray) {\n        var a = [\"x\", \"y\", \"z\", \"w\"];\n        var p = args[0];\n\n        for (var i = 0; i < a.length; i++) {\n          if (p.length && i >= p.length || !(a[i] in p)) break;\n          pos.push(p[a[i]]);\n        }\n      } else if (isArray) {\n        pos = [].slice.call(args[0]);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"error\";\n      var defaultReturn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      if (Util.warnLevel() == \"error\") {\n        throw new Error(message);\n      } else if (Util.warnLevel() == \"warn\") {\n        console.warn(message);\n      }\n\n      return defaultReturn;\n    }\n  }, {\n    key: \"randomInt\",\n    value: function randomInt(range) {\n      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return Math.floor(Math.random() * range) + start;\n    }\n  }, {\n    key: \"split\",\n    value: function split(pts, size, stride) {\n      var loopBack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var st = stride || size;\n      var chunks = [];\n\n      for (var i = 0; i < pts.length; i++) {\n        if (i * st + size > pts.length) {\n          if (loopBack) {\n            var g = pts.slice(i * st);\n            g = g.concat(pts.slice(0, (i * st + size) % size));\n            chunks.push(g);\n          } else {\n            break;\n          }\n        } else {\n          chunks.push(pts.slice(i * st, i * st + size));\n        }\n      }\n\n      return chunks;\n    }\n  }, {\n    key: \"flatten\",\n    value: function flatten(pts) {\n      var flattenAsGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var arr = flattenAsGroup ? new Group() : new Array();\n      return arr.concat.apply(arr, pts);\n    }\n  }, {\n    key: \"combine\",\n    value: function combine(a, b, op) {\n      var result = [];\n\n      for (var i = 0, len = a.length; i < len; i++) {\n        for (var k = 0, lenB = b.length; k < lenB; k++) {\n          result.push(op(a[i], b[k]));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"zip\",\n    value: function zip(arrays) {\n      var z = [];\n\n      for (var i = 0, len = arrays[0].length; i < len; i++) {\n        var p = [];\n\n        for (var k = 0; k < arrays.length; k++) {\n          p.push(arrays[k][i]);\n        }\n\n        z.push(p);\n      }\n\n      return z;\n    }\n  }, {\n    key: \"stepper\",\n    value: function stepper(max) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var callback = arguments.length > 3 ? arguments[3] : undefined;\n      var c = min;\n      return function () {\n        c += stride;\n\n        if (c >= max) {\n          c = min + (c - max);\n        }\n\n        if (callback) callback(c);\n        return c;\n      };\n    }\n  }, {\n    key: \"forRange\",\n    value: function forRange(fn, range) {\n      var start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var temp = [];\n\n      for (var i = start, len = range; i < len; i += step) {\n        temp[i] = fn(i);\n      }\n\n      return temp;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, callback) {\n      var request = new XMLHttpRequest();\n      request.open('GET', url, true);\n\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n          callback(request.responseText, true);\n        } else {\n          callback(\"Server error (\".concat(request.status, \") when loading \\\"\").concat(url, \"\\\"\"), false);\n        }\n      };\n\n      request.onerror = function () {\n        callback(\"Unknown network error\", false);\n      };\n\n      request.send();\n    }\n  }]);\n\n  return Util;\n}();\nUtil._warnLevel = \"mute\";","map":null,"metadata":{},"sourceType":"module"}