{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport 'whatwg-fetch';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar httpUrl = 'http://localhost:3004/'; //const httpUrl='http://10.0.0.15:3004/';\n\nvar HttpService = function HttpService() {\n  _classCallCheck(this, HttpService);\n\n  this.getProducts = function () {\n    var promiseGetProducts = new Promise(function (resolve, reject) {\n      fetch(httpUrl + 'product').then(function (response) {\n        resolve(response.json());\n      });\n    });\n    return promiseGetProducts;\n  };\n\n  this.getProjects = function (newFileName) {\n    var promiseProjects = new Promise(function (resolve, reject) {\n      fetch(httpUrl + 'folder/projects', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"fileName\": newFileName\n        })\n      }).then(function (response) {\n        resolve(response.json());\n      });\n    });\n    return promiseProjects;\n  };\n\n  this.sendEmailToMe = function (name, email, subject, message) {\n    var promiseMailSend = new Promise(function (resolve, reject) {\n      fetch(httpUrl + 'sendMeEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"name\": name,\n          \"email\": email,\n          \"subject\": subject,\n          \"message\": message\n        })\n      });\n    });\n    console.log(promiseMailSend);\n    return promiseMailSend;\n  };\n\n  this.getContent = function (newFileName) {\n    var promiseContent = new Promise(function (resolve, reject) {\n      fetch(httpUrl + 'file/content', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"fileName\": newFileName\n        })\n      }).then(function (response) {\n        resolve(response.json());\n      });\n    });\n    return promiseContent;\n  };\n\n  this.getFile = function () {\n    var promiseFile = new Promise(function (resolve, reject) {\n      fetch(httpUrl + 'resumeOS').then(function (response) {\n        resolve(response);\n      });\n    });\n    return promiseFile;\n  };\n\n  this.getImg = function () {\n    var promiseAnImg = new Promise(function (resolve, reject) {\n      fetch(httpUrl + 'resumeOS').then(function (response) {\n        resolve(response.blob());\n      });\n    });\n    return promiseAnImg;\n  };\n} //    getWishListByTitle = (wishListTitle) => {\n//      var promiseGetWishList = new Promise((resolve, reject) => {\n//           fetch('http://localhost:3004/wishlist/byTitle', {\n//              method: 'POST',\n//              headers: {\n//                'Content-Type': 'application/json'\n//              },\n//              body: JSON.stringify({\n//                \"title\": wishListTitle,\n//              })\n//           }).then(response => {\n//                resolve(response.json());\n//           }) \n//        });\n//        \n//\t  return promiseGetWishList;\n//    }\n//    \n//    createWishList = (wishListTitle) => {\n//        var promiseGetWishList = new Promise((resolve, reject) => {\n//           fetch('http://localhost:3004/wishlist', {\n//              method: 'POST',\n//              headers: {\n//                'Content-Type': 'application/json'\n//              },\n//              body: JSON.stringify({\n//                \"title\": wishListTitle,\n//              })\n//           }).then(response => {\n//               resolve(response.json());\n//           }) \n//        });\n//        \n//\t  return promiseGetWishList;\n//    }\n//    \n//    replaceToNewWishList = (products,newWishListId) => {\n//        var promiseAddToWishList = new Promise((resolve, reject) => {\n//           fetch('http://localhost:3004/wishlist/products', {\n//              method: 'PUT',\n//              headers: {\n//                'Accept': 'application/json',\n//                'Content-Type': 'application/json'\n//              },\n//              body: JSON.stringify({\n//                \"products\": products,\n//                \"wishListId\": newWishListId,\n//              })\n//           })\n//        });\n//        return promiseAddToWishList;\n//    }\n//    \n//    AddToWishList = (products,newWishListId) => {\n//        var promiseAddToWishList = new Promise((resolve, reject) => {\n//           fetch('http://localhost:3004/wishlist/product/add', {\n//              method: 'PUT',\n//              headers: {\n//                'Accept': 'application/json',\n//                'Content-Type': 'application/json'\n//              },\n//              body: JSON.stringify({\n//                \"products\": products,\n//                \"wishListId\": newWishListId,\n//              })\n//           })\n//        });\n//        return promiseAddToWishList;\n//    }\n;\n\nexport default HttpService;","map":{"version":3,"sources":["C:\\Users\\ori saida\\Desktop\\OriHub\\client\\src\\services\\http-service.js"],"names":["fs","require","path","httpUrl","HttpService","getProducts","promiseGetProducts","Promise","resolve","reject","fetch","then","response","json","getProjects","newFileName","promiseProjects","method","headers","body","JSON","stringify","sendEmailToMe","name","email","subject","message","promiseMailSend","console","log","getContent","promiseContent","getFile","promiseFile","getImg","promiseAnImg","blob"],"mappings":"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","sourcesContent":["import 'whatwg-fetch';\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nconst httpUrl='http://localhost:3004/';\r\n//const httpUrl='http://10.0.0.15:3004/';\r\nclass HttpService {\r\n\r\n    getProducts = () => {\r\n      var promiseGetProducts = new Promise((resolve, reject) => {\r\n\t   fetch(httpUrl+'product').then(response => {\r\n            resolve(response.json());\r\n        }) \r\n\t});\r\n\t  return promiseGetProducts;\r\n    }\r\n    \r\n    getProjects = (newFileName) => {\r\n        var promiseProjects = new Promise((resolve, reject) => {\r\n            fetch(httpUrl+'folder/projects', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                \"fileName\": newFileName,\r\n              })\r\n           }).then(response => {\r\n                resolve(response.json());\r\n           }) \r\n        });\r\n        return promiseProjects;\r\n    }\r\n    \r\n    sendEmailToMe = (name, email, subject, message) => {\r\n        var promiseMailSend = new Promise((resolve, reject) => {\r\n           fetch(httpUrl+'sendMeEmail', {\r\n               method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                  \"name\": name,\r\n                \"email\": email,\r\n                \"subject\": subject,\r\n                \"message\": message,\r\n              })\r\n           }) \r\n           });\r\n        console.log(promiseMailSend);\r\n        return promiseMailSend;\r\n    }\r\n    \r\n    getContent = (newFileName) => {\r\n        var promiseContent = new Promise((resolve, reject) => {\r\n           fetch(httpUrl+'file/content', {\r\n               method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                \"fileName\": newFileName,\r\n              })\r\n           }).then(response => {\r\n               resolve(response.json()); \r\n           }) \r\n        });\r\n        return promiseContent;\r\n    }\r\n    \r\n     getFile = () => {\r\n        var promiseFile = new Promise((resolve, reject) => {\r\n           fetch(httpUrl+'resumeOS').then(response => {\r\n              resolve(response);  \r\n           }) \r\n        });\r\n        return promiseFile;\r\n    }\r\n    \r\n     getImg = () => {\r\n         var promiseAnImg = new Promise((resolve, reject) => {\r\n           fetch(httpUrl+'resumeOS').then(response => {\r\n                resolve(response.blob());\r\n           }) \r\n        });\r\n\t  return promiseAnImg;\r\n     }\r\n     \r\n//    getWishListByTitle = (wishListTitle) => {\r\n//      var promiseGetWishList = new Promise((resolve, reject) => {\r\n//           fetch('http://localhost:3004/wishlist/byTitle', {\r\n//              method: 'POST',\r\n//              headers: {\r\n//                'Content-Type': 'application/json'\r\n//              },\r\n//              body: JSON.stringify({\r\n//                \"title\": wishListTitle,\r\n//              })\r\n//           }).then(response => {\r\n//                resolve(response.json());\r\n//           }) \r\n//        });\r\n//        \r\n//\t  return promiseGetWishList;\r\n//    }\r\n//    \r\n//    createWishList = (wishListTitle) => {\r\n//        var promiseGetWishList = new Promise((resolve, reject) => {\r\n//           fetch('http://localhost:3004/wishlist', {\r\n//              method: 'POST',\r\n//              headers: {\r\n//                'Content-Type': 'application/json'\r\n//              },\r\n//              body: JSON.stringify({\r\n//                \"title\": wishListTitle,\r\n//              })\r\n//           }).then(response => {\r\n//               resolve(response.json());\r\n//           }) \r\n//        });\r\n//        \r\n//\t  return promiseGetWishList;\r\n//    }\r\n//    \r\n//    replaceToNewWishList = (products,newWishListId) => {\r\n//        var promiseAddToWishList = new Promise((resolve, reject) => {\r\n//           fetch('http://localhost:3004/wishlist/products', {\r\n//              method: 'PUT',\r\n//              headers: {\r\n//                'Accept': 'application/json',\r\n//                'Content-Type': 'application/json'\r\n//              },\r\n//              body: JSON.stringify({\r\n//                \"products\": products,\r\n//                \"wishListId\": newWishListId,\r\n//              })\r\n//           })\r\n//        });\r\n//        return promiseAddToWishList;\r\n//    }\r\n//    \r\n//    AddToWishList = (products,newWishListId) => {\r\n//        var promiseAddToWishList = new Promise((resolve, reject) => {\r\n//           fetch('http://localhost:3004/wishlist/product/add', {\r\n//              method: 'PUT',\r\n//              headers: {\r\n//                'Accept': 'application/json',\r\n//                'Content-Type': 'application/json'\r\n//              },\r\n//              body: JSON.stringify({\r\n//                \"products\": products,\r\n//                \"wishListId\": newWishListId,\r\n//              })\r\n//           })\r\n//        });\r\n//        return promiseAddToWishList;\r\n//    }\r\n}\r\n\r\nexport default HttpService;"]},"metadata":{},"sourceType":"module"}