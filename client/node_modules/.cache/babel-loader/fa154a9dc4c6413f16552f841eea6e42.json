{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ReactRevealText = function (_React$Component) {\n  _inherits(ReactRevealText, _React$Component);\n\n  function ReactRevealText(props) {\n    _classCallCheck(this, ReactRevealText);\n\n    var _this = _possibleConstructorReturn(this, (ReactRevealText.__proto__ || Object.getPrototypeOf(ReactRevealText)).call(this, props));\n\n    _this.getDelays = _this.getDelays.bind(_this);\n    _this.renderToSpan = _this.renderToSpan.bind(_this);\n    return _this;\n  }\n\n  _createClass(ReactRevealText, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      var showChanged = this.props.show !== nextProps.show;\n      var textChanged = this.props.text !== nextProps.text;\n      var childrenChanged = this.props.children !== nextProps.children;\n      return showChanged || textChanged || childrenChanged;\n    }\n  }, {\n    key: 'getDelays',\n    value: function getDelays(length) {\n      var _props = this.props,\n          threshold = _props.threshold,\n          delayMin = _props.delayMin,\n          delayMax = _props.delayMax; // generate random numbers and then convert to delays\n\n      var randoms = function randoms() {\n        return (0, _utils.getRandoms)(length, threshold);\n      };\n\n      var toDelay = function toDelay(num) {\n        return (0, _utils.randomToDelay)(num, delayMin, delayMax);\n      };\n\n      return randoms().map(toDelay);\n    }\n  }, {\n    key: 'renderToSpan',\n    value: function renderToSpan(_ref, index) {\n      var character = _ref.character,\n          delay = _ref.delay;\n      var _props2 = this.props,\n          show = _props2.show,\n          transitionTime = _props2.transitionTime,\n          timingFunction = _props2.timingFunction;\n      var style = {\n        opacity: show ? '1' : '0',\n        transition: 'opacity ' + transitionTime + 'ms',\n        transitionDelay: delay + 'ms',\n        transitionTimingFunction: timingFunction\n      };\n      return _react2.default.createElement('span', {\n        key: index,\n        style: style\n      }, character);\n    }\n  }, {\n    key: 'renderSpans',\n    value: function renderSpans(text) {\n      var textArray = text.split('');\n      var delays = this.getDelays(textArray.length);\n\n      var combineWithDelays = function combineWithDelays(character, index) {\n        return {\n          character: character,\n          delay: delays[index]\n        };\n      };\n\n      return textArray.map(combineWithDelays).map(this.renderToSpan);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          style = _props3.style,\n          className = _props3.className;\n      var text = this.props.text || this.props.children;\n      return _react2.default.createElement('div', {\n        style: style,\n        className: className\n      }, this.renderSpans(text));\n    }\n  }]);\n\n  return ReactRevealText;\n}(_react2.default.Component);\n\nReactRevealText.propTypes = {\n  text: _propTypes2.default.string,\n  show: _propTypes2.default.bool,\n  transitionTime: _propTypes2.default.number,\n  timingFunction: _propTypes2.default.string,\n  delayMin: _propTypes2.default.number,\n  delayMax: _propTypes2.default.number,\n  threshold: _propTypes2.default.number,\n  style: _propTypes2.default.object,\n  className: _propTypes2.default.string,\n  children: _propTypes2.default.string\n};\nReactRevealText.defaultProps = {\n  transitionTime: 1300,\n  timingFunction: 'linear',\n  delayMin: 200,\n  delayMax: 1200,\n  threshold: 0.2,\n  text: '',\n  className: '',\n  style: {},\n  show: false,\n  children: undefined\n};\nexports.default = ReactRevealText;","map":null,"metadata":{},"sourceType":"script"}