{"ast":null,"code":"import _possibleConstructorReturn from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ori saida\\\\Desktop\\\\OriHub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util } from \"./Util\";\nexport var Form =\n/*#__PURE__*/\nfunction () {\n  function Form() {\n    _classCallCheck(this, Form);\n\n    this._ready = false;\n  }\n\n  _createClass(Form, [{\n    key: \"ready\",\n    get: function get() {\n      return this._ready;\n    }\n  }], [{\n    key: \"_checkSize\",\n    value: function _checkSize(pts) {\n      var required = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n      if (pts.length < required) {\n        Util.warn(\"Requires 2 or more Pts in this Group.\");\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return Form;\n}();\nexport var VisualForm =\n/*#__PURE__*/\nfunction (_Form) {\n  _inherits(VisualForm, _Form);\n\n  function VisualForm() {\n    var _this;\n\n    _classCallCheck(this, VisualForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VisualForm).apply(this, arguments));\n    _this._filled = true;\n    _this._stroked = true;\n    _this._font = new Font(14, \"sans-serif\");\n    return _this;\n  }\n\n  _createClass(VisualForm, [{\n    key: \"_multiple\",\n    value: function _multiple(groups, shape) {\n      if (!groups) return this;\n\n      for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        rest[_key - 2] = arguments[_key];\n      }\n\n      for (var i = 0, len = groups.length; i < len; i++) {\n        this[shape].apply(this, [groups[i]].concat(rest));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(c) {\n      return this;\n    }\n  }, {\n    key: \"fillOnly\",\n    value: function fillOnly(c) {\n      this.stroke(false);\n      return this.fill(c);\n    }\n  }, {\n    key: \"stroke\",\n    value: function stroke(c, width, linejoin, linecap) {\n      return this;\n    }\n  }, {\n    key: \"strokeOnly\",\n    value: function strokeOnly(c, width, linejoin, linecap) {\n      this.fill(false);\n      return this.stroke(c, width, linejoin, linecap);\n    }\n  }, {\n    key: \"points\",\n    value: function points(pts, radius, shape) {\n      if (!pts) return;\n\n      for (var i = 0, len = pts.length; i < len; i++) {\n        this.point(pts[i], radius, shape);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"circles\",\n    value: function circles(groups) {\n      return this._multiple(groups, \"circle\");\n    }\n  }, {\n    key: \"squares\",\n    value: function squares(groups) {\n      return this._multiple(groups, \"square\");\n    }\n  }, {\n    key: \"lines\",\n    value: function lines(groups) {\n      return this._multiple(groups, \"line\");\n    }\n  }, {\n    key: \"polygons\",\n    value: function polygons(groups) {\n      return this._multiple(groups, \"polygon\");\n    }\n  }, {\n    key: \"rects\",\n    value: function rects(groups) {\n      return this._multiple(groups, \"rect\");\n    }\n  }, {\n    key: \"filled\",\n    get: function get() {\n      return this._filled;\n    },\n    set: function set(b) {\n      this._filled = b;\n    }\n  }, {\n    key: \"stroked\",\n    get: function get() {\n      return this._stroked;\n    },\n    set: function set(b) {\n      this._stroked = b;\n    }\n  }, {\n    key: \"currentFont\",\n    get: function get() {\n      return this._font;\n    }\n  }]);\n\n  return VisualForm;\n}(Form);\nexport var Font =\n/*#__PURE__*/\nfunction () {\n  function Font() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n    var face = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"sans-serif\";\n    var weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    var style = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    var lineHeight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1.5;\n\n    _classCallCheck(this, Font);\n\n    this.size = size;\n    this.face = face;\n    this.style = style;\n    this.weight = weight;\n    this.lineHeight = lineHeight;\n  }\n\n  _createClass(Font, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return \"\".concat(this.style, \" \").concat(this.weight, \" \").concat(this.size, \"px/\").concat(this.lineHeight, \" \").concat(this.face);\n    }\n  }]);\n\n  return Font;\n}();","map":null,"metadata":{},"sourceType":"module"}